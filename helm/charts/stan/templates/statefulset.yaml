---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "stan.name" . }}
  labels:
    app: {{ template "stan.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
spec:
  selector:
    matchLabels:
      app: {{ template "stan.name" . }}

  replicas: {{ include "stan.replicaCount" .  | required ".Values.stan.replicas should be greater or equal to 3 in clustered mode" }}

  # NATS Streaming service name
  serviceName: {{ template "stan.name" . }}

  template:
    metadata:
      {{- if or .Values.podAnnotations .Values.exporter.enabled }}
      annotations:
      {{- if .Values.exporter.enabled }}
        prometheus.io/path: /metrics
        prometheus.io/port: "7777"
        prometheus.io/scrape: "true"
      {{- end }}
      {{- range $key, $value := .Values.podAnnotations }}
        {{ $key }}: {{ $value | quote }}
      {{- end }}
      {{- end }}
      labels:
        app: {{ template "stan.name" . }}
        chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    spec:
      {{- if .Values.stan.nats.serviceRoleAuth.enabled }}
      serviceAccountName: {{ template "stan.serviceAccountName" . }}
      {{- end }}
{{- with .Values.imagePullSecrets }}
      imagePullSecrets:
{{- toYaml . | nindent 8 }}
{{- end }}
{{- with .Values.securityContext }}
      securityContext:
{{ toYaml . | indent 8 }}
{{- end }}
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          name: {{ template "stan.name".  }}-config
          defaultMode: 0755
        name: config-volume
      {{- if and .Values.stan.tls.enabled .Values.stan.tls.secretName }}
      - name: stan-client-tls-volume
        secret:
          secretName: {{ .Values.stan.tls.secretName }}
      {{- end }}

      {{- if .Values.store.volume.enabled }}
      {{- if .Values.store.volume.persistentVolumeClaim }}
      - name: {{ template "stan.name" . }}-pvc
        persistentVolumeClaim:
          claimName: {{ .Values.store.volume.persistentVolumeClaim.claimName }}
      {{- end }}
      {{- end }}
      {{- if .Values.stan.credentials }}
      - name: stan-sys-creds
        secret:
          secretName: {{ .Values.stan.credentials.secret.name }}
      {{- end }}

      # Local volume shared with the reloader.
      - name: pid
        emptyDir: {}

      affinity:
        {{- if .Values.affinity }}
          {{- toYaml .Values.affinity | nindent 8 }}
        {{- else }}
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - {{ template "stan.name" . }}
            topologyKey: kubernetes.io/hostname
        {{- end }}
      containers:
        ####################
        #  NATS Streaming  #
        ####################
        - name: stan
          image: {{ .Values.stan.image }}
          args:
          - -sc
          - /etc/stan-config/stan.conf
          {{- if eq .Values.store.type "file" }}
          {{- if .Values.store.backup.enabled }}
          - --file_slice_archive_script
          - /etc/stan-config/backup.sh
          {{- end }}
          {{- end }}
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: CLUSTER_ADVERTISE
            value: {{ template "nats.clusterAdvertise" . }}
          - name: STAN_SERVICE_NAME
            value: {{ template "stan.name" . }}
          - name: STAN_REPLICAS
            value: "{{ .Values.stan.replicas }}"
          {{- if .Values.stan.nats.serviceRoleAuth.enabled }}
          - name: NATS_OPERATOR_SERVICE_ACCOUNT
            valueFrom:
              fieldRef:
                fieldPath: spec.serviceAccountName
          - name: NATS_OPERATOR_BOUND_TOKEN
            valueFrom:
              secretKeyRef:
                name: {{ template "stan.serviceAccountName" . }}-{{ .Values.stan.nats.serviceRoleAuth.natsClusterName }}-bound-token
                key: token
          - name: NATS_SERVICE
            value: {{ .Values.stan.nats.url }}
          - name: NATS_URL
            value: nats://$(NATS_OPERATOR_SERVICE_ACCOUNT):$(NATS_OPERATOR_BOUND_TOKEN)@$(NATS_SERVICE)
          {{- end }}
          ports:
          - containerPort: 8222
            name: monitor
          - containerPort: 7777
            name: metrics
          {{- with .Values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}

          {{- if and .Values.store.cluster.enabled .Values.clusterReadinessProbe.enabled }}
          {{- with .Values.clusterReadinessProbe.probe }}
          readinessProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- else }}
          {{- with .Values.readinessProbe }}
          readinessProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- end }}

          volumeMounts:
          - name: config-volume
            mountPath: /etc/stan-config
          {{- if eq .Values.store.type "file" }}
          {{- if .Values.store.volume.enabled }}
          - name: {{ template "stan.name" . }}-pvc
            mountPath: {{ .Values.store.volume.mount }}
          {{- end }}
          {{- end }}
          {{- if and .Values.stan.tls.enabled .Values.stan.tls.secretName }}
          - name: stan-client-tls-volume
            mountPath: /etc/nats/certs
          {{- end }}
          {{- if .Values.stan.credentials }}
          - name: stan-sys-creds
            mountPath: /etc/stan-creds
          {{- end }}
          - name: pid
            mountPath: /var/run/stan

        {{- if eq .Values.store.type "file" }}
        {{- if .Values.store.backup.enabled }}
        ######################
        # # Backup Container #
        ######################
        - name: backup
          image: amazon/aws-cli
          command: ["/bin/sh", "-c"]
          args:
          - {{ toYaml .Values.store.backup.backupContainerScript | indent 12 }}
          env:
          - name: SLEEP_TIME
            value: "{{ .Values.store.backup.sleepTime }}"
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          {{- if .Values.store.backup.credentialsSecretName }}
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: {{ .Values.store.backup.credentialsSecretName }}
                key: awsAccessKeyId
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: {{ .Values.store.backup.credentialsSecretName }}
                key: awsSecretKeyId
          - name: AWS_DEFAULT_REGION
            valueFrom:
              secretKeyRef:
                name: {{ .Values.store.backup.credentialsSecretName }}
                key: awsDefaultRegion
          {{- end }}
          - name: STORE_FILE_PATH
            value: "{{ .Values.store.file.path }}"
          - name: STORE_BACKUP_S3PATH
            value: "{{ required "A valid s3 path is required!" .Values.store.backup.s3Path }}"
          - name: STAN_NAME
            value: "{{ template "stan.name" . }}"
          {{- with .Values.store.backup.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- if .Values.store.volume.enabled }}
          volumeMounts:
            - name: {{ template "stan.name" . }}-pvc
              mountPath: {{ .Values.store.volume.mount }}
          {{- end }}
        {{- end }}
        {{- end }}

        {{- if .Values.exporter.enabled }}
        #################################
        #                               #
        #  NATS Prometheus Exporter     #
        #                               #
        #################################
        - name: metrics
          image: {{ .Values.exporter.image }}
          args:
          - -connz
          - -routez
          - -subz
          - -varz
          - -channelz
          - -serverz
          - http://localhost:8222/
          ports:
          - containerPort: 7777
            name: metrics
        {{- end }}

        {{- if not .Values.stan.nats.url }}
        {{- if .Values.reloader.enabled }}
        #################################
        #                               #
        #  NATS Configuration Reloader  #
        #                               #
        #################################
        - name: reloader
          image: {{ .Values.reloader.image }}
          imagePullPolicy: {{ .Values.reloader.pullPolicy }}
          command:
           - "nats-server-config-reloader"
           - "-pid"
           - "/var/run/stan/stan.pid"
           - "-config"
           - "/etc/stan-config/stan.conf"
          volumeMounts:
            - name: config-volume
              mountPath: /etc/stan-config
            - name: pid
              mountPath: /var/run/stan
        {{- end }}
        {{- end }}

  {{- if eq .Values.store.type "file" }}
  {{- if .Values.store.volume.enabled }}
  {{- if not .Values.store.volume.persistentVolumeClaim }}
  volumeClaimTemplates:
  - metadata:
      name: {{ template "stan.name" . }}-pvc
    spec:
      {{- with .Values.store.volume.storageClass }}
      storageClassName: {{ . }}
      {{- end }}
      accessModes:
      {{- with .Values.store.volume.accessModes }}
      - {{ . }}
      {{- end }}
      resources:
        requests:
          storage: {{ .Values.store.volume.storageSize }}
  {{- end }}
  {{- end }}
  {{- end }}
